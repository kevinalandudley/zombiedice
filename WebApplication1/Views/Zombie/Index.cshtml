@model WebApplication1.Models.ZombieModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Html.BeginForm("NextAction", "Zombie", FormMethod.Post, new { @class = "form-horizontal", role = "form", novalidate = "novalidate" }))
{

    <!--Game-->
    @Html.HiddenFor(model => model.Game.RoundType, new { @Value = Model.Game.RoundType })
    @Html.HiddenFor(model => model.Game.Turn.RoundType, new { @Value = Model.Game.Turn.RoundType })
    @Html.HiddenFor(model => model.Game.Turn.PlayerBrainValue, new { @Value = Model.Game.Turn.PlayerBrainValue })
    @Html.HiddenFor(model => model.Game.Turn.HighScore, new { @Value = Model.Game.Turn.HighScore })
    @Html.HiddenFor(model => model.Game.Turn.LastAction, new { @Value = Model.Game.Turn.LastAction })

    <table>

        <!--Row for logo and active player name-->
        <tr>
            <td><img src="~/Content/ZombieDiceLogo.gif" style="width:300px"/></td>
            @if (Model.Game.RoundType == WebApplication1.Models.GameRoundType.GameOver)
            {
                <td colspan="5" style="text-align:center; font-size:50px; font-weight:bold; font-family:Stencil; color:crimson; text-shadow: -2px 0 black, 0 2px black, 2px 0 black, 0 -2px black;">@Model.Game.Players[Model.Game.WinnerPlayerIndex].Name Wins!</td>
            }
            else
            {
                <td colspan="5" style="text-align:center; font-size:50px; font-weight:bold; font-family:Stencil; color:crimson; text-shadow: -2px 0 black, 0 2px black, 2px 0 black, 0 -2px black;">@Model.Game.Players[Model.Game.ActivePlayerIndex].Name</td>
            }
        </tr>

        <!--Row for players table, brain count, turn message, and shotgun count-->
        <tr style="font-size:30px; font-weight:bold" valign="top">

            <!--Players table-->
            <td width="300px" rowspan="2" valign="top" style="padding-top:7px; padding-right:7px">
                <table border="1" style="width:100%; font-size:20px; border-color:black; border-collapse:collapse; padding-top:20px">
                    <tr style="background-color:burlywood">
                        <th style="text-align:left">Player</th>
                        <th style="text-align:center">Score</th>
                    </tr>
                    @{
                        for (int i = 0; i < Model.Game.Players.Count(); i++)
                        {
                            <!--Set player background color-->
                            var rowColor = "papayawhip";
                            if (@Model.Game.Players[i].IsOut)
                            {
                                rowColor = "silver";
                            }
                            else if (i == (@Model.Game.ActivePlayerIndex))
                            {
                                rowColor = "red";
                            }
                            else if (@Model.Game.HighScore >= 13 && @Model.Game.Players[i].Score >= @Model.Game.HighScore)
                            {
                                rowColor = "white";
                            }
                            <tr style="background-color:@rowColor">
                                <td>@Model.Game.Players[i].Name</td>
                                <td width="50px" style="text-align:center">@Model.Game.Players[i].Score</td>
                            </tr>
                            @Html.HiddenFor(model => model.Game.Players[i].Name, new { @Value = Model.Game.Players[i].Name })
                            @Html.HiddenFor(model => model.Game.Players[i].Score, new { @Value = Model.Game.Players[i].Score })
                            @Html.HiddenFor(model => model.Game.Players[i].IsOut, new { @Value = Model.Game.Players[i].IsOut })
                        }
                    }
                    @Html.HiddenFor(model => model.Game.ActivePlayerIndex, new { @Value = Model.Game.ActivePlayerIndex })
                    @Html.HiddenFor(model => model.Game.StartingPlayerIndex, new { @Value = Model.Game.StartingPlayerIndex })
                </table>
            </td>

            <!--Brian count-->
            <td width="260px">Brains: @Model.Game.Turn.BrainValue / @Model.Game.ActivePlayerBrainValue</td>
            <td width="1px"></td>

            <!--Turn message-->
            @{
                var messageColor = "white";
                if (Model.Game.Turn.MessageType == WebApplication1.Models.Turn.TurnMessageType.SortAction)
                {
                    messageColor = "darkred";
                }
                var fontSize = "30px";
                if (Model.Game.Turn.Message.Length >= 19)
                {
                    fontSize = "22px";
                }
                else if (Model.Game.Turn.Message.Length >= 12)
                {
                    fontSize = "24px";
                }
                <td width="260px" style="text-align:center; font-family:Broadway; font-size:@fontSize; color:@messageColor">@Model.Game.Turn.Message</td>
            }
            <td width="1px"></td>

            <!--Shots count-->
            <td width="272px">Shots: @Model.Game.Turn.ShotgunValue / 3</td>
        </tr>

        <!--Row for dice-->
        <tr>
            <!--Brain dice-->
            <td width="260px" valign="top" style="border:2px solid black" >
                @{
                    for (int i = 0; i < Model.Game.Turn.Keep.Dice.Count; i++)
                    {
                        if (Model.Game.Turn.Keep.Dice[i].FaceGroup == WebApplication1.Models.DieFaceGroup.Brain)
                        {
                            <img src="~/Content/@Model.Game.Turn.Keep.Dice[i].ImageName" />
                        }
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].BrainValue, new { @Value = Model.Game.Turn.Keep.Dice[i].BrainValue })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].Face, new { @Value = Model.Game.Turn.Keep.Dice[i].Face })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].FaceType, new { @Value = Model.Game.Turn.Keep.Dice[i].FaceType })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].Kind, new { @Value = Model.Game.Turn.Keep.Dice[i].Kind })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].ShotgunValue, new { @Value = Model.Game.Turn.Keep.Dice[i].ShotgunValue })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].ImageName, new { @Value = Model.Game.Turn.Keep.Dice[i].ImageName })
                    }
                }
            </td>
            <td width="1px"></td>

            <!--Hand dice and buttons-->
            <td width="270px" valign="top">
                <table style="width:100%" valign="top">
                    <!--Hand dice-->
                    <tr height="93px" valign="top">
                        <td style="border:2px solid black">
                            @{
                                for (int i = 0; i < Model.Game.Turn.Hand.Dice.Count; i++)
                                {
                                    <img src="~/Content/@Model.Game.Turn.Hand.Dice[i].ImageName" />
                                    @Html.HiddenFor(model => model.Game.Turn.Hand.Dice[i].BrainValue, new { @Value = Model.Game.Turn.Hand.Dice[i].BrainValue })
                                    @Html.HiddenFor(model => model.Game.Turn.Hand.Dice[i].Face, new { @Value = Model.Game.Turn.Hand.Dice[i].Face })
                                    @Html.HiddenFor(model => model.Game.Turn.Hand.Dice[i].FaceType, new { @Value = Model.Game.Turn.Hand.Dice[i].FaceType })
                                    @Html.HiddenFor(model => model.Game.Turn.Hand.Dice[i].Kind, new { @Value = Model.Game.Turn.Hand.Dice[i].Kind })
                                    @Html.HiddenFor(model => model.Game.Turn.Hand.Dice[i].ShotgunValue, new { @Value = Model.Game.Turn.Hand.Dice[i].ShotgunValue })
                                    @Html.HiddenFor(model => model.Game.Turn.Hand.Dice[i].ImageName, new { @Value = Model.Game.Turn.Hand.Dice[i].ImageName })
                                }
                            }
                        </td>
                    </tr>

                    <tr height="1px">
                        <td></td>
                    </tr>

                    <!--Hand buttons-->
                    <tr style="vertical-align:top">
                        <td valign="top">
                            @{
                                if (Model.Game.RoundType != WebApplication1.Models.GameRoundType.GameOver)
                                {
                                    string buttonName = Model.Game.Turn.NextActionName;
                                    if (Model.Game.Turn.NextAction == WebApplication1.Models.Turn.Action.Quit)
                                    {
                                        buttonName = "";
                                    }
                                    if (buttonName != "")
                                    {
                                        string buttonWidth = (Model.Game.Turn.AllowQuit()) ? "49%" : "100%";
                                        <input type="submit" id="@buttonName" name="command" value="@buttonName" style="height:60px;  width:@buttonWidth; font-size:42px; font-family:poor richard; font-weight:bold;
                                                background -moz-linear-gradient(top, rgba(231,229,207,1) 0%, rgba(114,109,90,1) 100%); />* FF3.6-15 */
                                        background: -webkit-linear-gradient(top, rgba(231,229,207,1) 0%, rgba(114,109,90,1) 100%); /* Chrome10-25,Safari5.1-6 */
                                        background: linear-gradient(to bottom, rgba(231,229,207,1) 0%, rgba(114,109,90,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
                                        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#a6000000', endColorstr='#00000000',GradientType=0 ); /* IE6-9 */ color:#2D4A6A;" />
                                    }
                                    if (Model.Game.Turn.AllowQuit())
                                    {
                                        string buttonWidth = (buttonName != "") ? "49%" : "100%";
                                        <input type="submit" id="Quit" name="command" value="Quit" style="height:60px; width:@buttonWidth; font-size:42px; font-family:poor richard; font-weight:bold;
                                                background -moz-linear-gradient(top, rgba(231,229,207,1) 0%, rgba(114,109,90,1) 100%); />* FF3.6-15 */
                                        background: -webkit-linear-gradient(top, rgba(231,229,207,1) 0%,rgba(114,109,90,1) 100%); /* Chrome10-25,Safari5.1-6 */
                                        background: linear-gradient(to bottom, rgba(231,229,207,1) 0%,rgba(114,109,90,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
                                        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#e7e5cf', endColorstr='#726d5a',GradientType=0 ); /* IE6-9 */ color:#9A232B;" />
                                    }
                                }
                            }
                        </td>
                    </tr>
                </table>
            </td>

            <td width="1px"></td>

            <!--Shots dice-->
            <td width="260px" valign="top" style="border:2px solid black">
                @{
                    for (int i = 0; i < Model.Game.Turn.Keep.Dice.Count; i++)
                    {
                        if (Model.Game.Turn.Keep.Dice[i].FaceGroup != WebApplication1.Models.DieFaceGroup.Brain)
                        {
                            <img src="~/Content/@Model.Game.Turn.Keep.Dice[i].ImageName" />
                        }
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].BrainValue, new { @Value = Model.Game.Turn.Keep.Dice[i].BrainValue })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].Face, new { @Value = Model.Game.Turn.Keep.Dice[i].Face })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].FaceType, new { @Value = Model.Game.Turn.Keep.Dice[i].FaceType })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].Kind, new { @Value = Model.Game.Turn.Keep.Dice[i].Kind })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].ShotgunValue, new { @Value = Model.Game.Turn.Keep.Dice[i].ShotgunValue })
                        @Html.HiddenFor(model => model.Game.Turn.Keep.Dice[i].ImageName, new { @Value = Model.Game.Turn.Keep.Dice[i].ImageName })
                    }
                }
            </td>
        </tr>

        <!--Cup data-->
        @{
            for (int i = 0; i < Model.Game.Turn.Cup.Dice.Count; i++)
            {
                @Html.HiddenFor(model => model.Game.Turn.Cup.Dice[i].BrainValue, new { @Value = Model.Game.Turn.Cup.Dice[i].BrainValue })
                @Html.HiddenFor(model => model.Game.Turn.Cup.Dice[i].Face, new { @Value = Model.Game.Turn.Cup.Dice[i].Face })
                @Html.HiddenFor(model => model.Game.Turn.Cup.Dice[i].FaceType, new { @Value = Model.Game.Turn.Cup.Dice[i].FaceType })
                @Html.HiddenFor(model => model.Game.Turn.Cup.Dice[i].Kind, new { @Value = Model.Game.Turn.Cup.Dice[i].Kind })
                @Html.HiddenFor(model => model.Game.Turn.Cup.Dice[i].ShotgunValue, new { @Value = Model.Game.Turn.Cup.Dice[i].ShotgunValue })
                @Html.HiddenFor(model => model.Game.Turn.Cup.Dice[i].ImageName, new { @Value = Model.Game.Turn.Cup.Dice[i].ImageName })
            }
        }
    </table>
}